{"version":3,"file":"static/js/887.4a8c8d83.chunk.js","mappings":"+eAyBA,MAAMA,GAAsBC,EAAAA,EAAAA,IAAO,QAAPA,CAAgB,CAC1CC,KAAM,gBACNC,SAAU,aACVC,OAAQ,EACRC,SAAU,SACVC,SAAU,WACVC,OAAQ,EACRC,KAAM,EACNC,WAAY,SACZC,MAAO,IA8MT,QA3MA,SAAmBC,GAA6C,IAA3C,YAACC,EAAW,cAAEC,EAAa,WAAEC,GAAWH,EAC3D,MAAOI,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,KACpCC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,KACxCG,EAAWC,IAAgBJ,EAAAA,EAAAA,UAAS,KACpCK,EAASC,IAAcN,EAAAA,EAAAA,UAAS,KAChCO,EAAgBC,IAAqBR,EAAAA,EAAAA,UAAS,QAC9CS,EAAMC,IAAWV,EAAAA,EAAAA,UAAS,IAC1BW,EAAaC,IAAkBZ,EAAAA,EAAAA,UAAS,IA8DzCa,EAfa,IAAIf,GAAWgB,MAAK,CAACC,EAAGC,KACzC,IAAKX,EAAS,OAAO,EACrB,MAAMY,EAAcpB,EAAWqB,QAAQb,GACvC,OAAIU,EAAEE,GAAeD,EAAEC,GACK,QAAnBV,GAA4B,EAAI,EAErCQ,EAAEE,GAAeD,EAAEC,GACK,QAAnBV,EAA2B,GAAK,EAElC,CAAC,IAMsBY,QAAQC,IAAG,IAAAC,EAAA,OAAW,QAAXA,EAAKD,EAAI,UAAE,IAAAC,OAAA,EAANA,EAAQC,WAAWC,SAAStB,EAAY,IAGlFuB,EAAgBX,EAAaY,MACjChB,EAAOE,EACPF,EAAOE,EAAcA,GAOvB,OAJAe,EAAAA,EAAAA,YAAU,KACR3B,EAAaH,EAAc,GAC3B,CAACA,KAGD+B,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CACFC,GAAI,CACFC,QAAS,OACTC,cAAe,SACf1C,SAAU,WACVI,MAAO,OACPuC,eAAgB,MAChBC,WAAY,UACZC,UAEFC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACP,GAAI,CACRpC,MAAO,OACP4C,EAAG,GACHH,SAAA,EACAC,EAAAA,EAAAA,MAACG,EAAAA,EAAU,CAACT,GAAI,CAAEU,WAAY,MAAOC,SAAU,QAASN,SAAA,CAC/B,IAAtBrC,EAAW4C,OAAe,mBAAqB,iBAAiB,aAEnEN,EAAAA,EAAAA,MAACP,EAAAA,EAAG,CACFC,GAAI,CACFC,QAAS,OACTE,eAAgB,gBAChBC,WAAY,SACZS,GAAI,EACJC,GAAI,GACJT,SAAA,EAEFP,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CACRC,QAAQ,WACRC,KAAK,QACLC,MAAO5C,EACP6C,SA7EkBC,IAC1B7C,EAAa6C,EAAMC,OAAOH,MAAM,EA6ExBI,YAAY,sBACZC,WAAY,CACVC,cACE1B,EAAAA,EAAAA,KAAC2B,EAAAA,EAAc,CAACjE,SAAS,MAAK6C,UAC5BP,EAAAA,EAAAA,KAAC4B,EAAAA,EAAU,CACTC,KAAK,MACLC,MAAM,UACNC,QAtDGC,KACnBzD,EAAeC,EAAU,EAqDc+B,UAEvBP,EAAAA,EAAAA,KAACiC,EAAAA,EAAU,SAKnB/B,GAAI,CAAEpC,MAAO,UAEf0C,EAAAA,EAAAA,MAAC0B,EAAAA,EAAM,CACLC,UAAU,QACVL,MAAM,UACNZ,QAAQ,YACRkB,WAAWpC,EAAAA,EAAAA,KAACqC,EAAAA,EAAc,IAAI9B,SAAA,CAC/B,gBAECP,EAAAA,EAAAA,KAAC5C,EAAmB,CAClBkF,KAAK,OACLC,OAAO,QACPlB,SAAWC,GAhIGA,KACxB,MAAMkB,EAAOlB,EAAMC,OAAOkB,MAAM,GAChC,GAAID,EAAM,CACR,MAAME,EAAS,IAAIC,WACnBD,EAAOE,OAAUC,IACf,MAAMC,EAAO,IAAIC,WAAWF,EAAEtB,OAAOyB,QAC/BC,EAAWC,EAAAA,GAAUJ,EAAM,CAAER,KAAM,UAGnCa,EAAYF,EAASG,WAAW,GAChCC,EAAYJ,EAASK,OAAOH,GAC5BI,EAAWL,EAAAA,GAAWM,cAAcH,EAAW,CAAEI,OAAQ,IAE/D,GAAIF,EAASzC,OAAS,EAAG,CACvB,MAAM4C,EAAOH,EAASzD,MAAM,GAC5B9B,EAAY0F,GACZtF,EAAasF,GACbC,QAAQC,IAAIF,EACd,GAEFhB,EAAOmB,kBAAkBrB,EAC3B,GA2G+BsB,CAAiBxC,GACtCyC,UAAU,WAKhB/D,EAAAA,EAAAA,KAACgE,EAAAA,EAAc,CAAAzD,UACbC,EAAAA,EAAAA,MAACyD,EAAAA,EAAK,CAAA1D,SAAA,EACJP,EAAAA,EAAAA,KAACkE,EAAAA,EAAS,CAAA3D,UACRP,EAAAA,EAAAA,KAACmE,EAAAA,EAAQ,CAAA5D,SACNrC,EAAWkG,KAAI,CAACC,EAAOC,KACtBtE,EAAAA,EAAAA,KAACuE,EAAAA,EAAS,CAAaC,MAAO,CAAEC,UAAW,UAAWlE,UACpDP,EAAAA,EAAAA,KAAC0E,EAAAA,EAAc,CACbC,OAAQjG,IAAY2F,EACpBO,UAAWlG,IAAY2F,EAAQzF,EAAiB,MAChDmD,QAASA,KAAM8C,OAjHjChG,EADcH,KADWoG,EAmH0BT,IAlHI,QAAnBzF,EACV,OAAS,YACnCD,EAAWmG,GAHcA,KAmHiC,EAAAvE,SAEvC8D,KANWC,UAYtBtE,EAAAA,EAAAA,KAAC+E,EAAAA,EAAS,CAAAxE,SACPV,EAAcuE,KAAI,CAAC3E,EAAKuF,KACvBhF,EAAAA,EAAAA,KAACmE,EAAAA,EAAQ,CAAA5D,SACNd,EAAI2E,KAAI,CAACa,EAAMC,KACdlF,EAAAA,EAAAA,KAACuE,EAAAA,EAAS,CAERC,MAAO,CACLW,OAAQ,OACRC,QAAS,MACTX,UAAW,UACXlE,SAED0E,GAPIC,MAHIF,aAmBvBhF,EAAAA,EAAAA,KAACqF,EAAAA,EAAe,CACdC,mBAAoB,CAAC,EAAG,GAAI,IAC5BnD,UAAU,MACVoD,MAAOrG,EAAa4B,OACpB9B,YAAaA,EACbF,KAAMA,EACN0G,aAhJiBC,CAACnE,EAAOoE,KAC/B3G,EAAQ2G,EAAQ,EAgJVC,oBA7IyBrE,IAC/BrC,EAAe2G,SAAStE,EAAMC,OAAOH,MAAO,KAC5CrC,EAAQ,EAAE,QAgJd,E,SCzNA,MAAM8G,EAAa,CACjB,YAAa,8BAA+B,YAAa,sBAErDC,EAAW,CACf,YAAa,cAAe,WAEf,SAASC,IACtB,MAAMC,GAAWC,EAAAA,EAAAA,OACX,KAACC,IAAQC,EAAAA,EAAAA,MACRC,EAAaC,IAAkBhI,EAAAA,EAAAA,UAASiI,QACxCtD,EAAQuD,IAAalI,EAAAA,EAAAA,UAAS,KAC9BmI,EAAWC,IAAgBpI,EAAAA,EAAAA,UAAS,KACpCqI,EAAaC,IAAkBtI,EAAAA,EAAAA,WAAS,IACxCuI,EAAWC,IAAgBxI,EAAAA,EAAAA,WAAS,GAuF3C,OA3BA0B,EAAAA,EAAAA,YAAU,KACW+G,WACjB,MAAMC,EAAWT,IAAMF,GAAaY,OAAO,aACrClE,EAAO,CAACmE,OAAQf,EAAKgB,IAAKC,KAAMJ,SAChCK,EAAAA,GAAMC,KAAKC,EAAAA,GAAUC,QAAQC,WAAY1E,GACtC2E,MAAKC,IACJnB,EAAUmB,EAAI5E,KAAKA,KAAKA,KAAK,IAE9B6E,OAAMC,IACLrB,EAAU,GAAG,GACb,EAaZiB,GAVeV,WACb,MAAMhE,EAAO,CAACmE,OAAQf,EAAKgB,WACrBE,EAAAA,GAAMC,KAAKC,EAAAA,GAAUO,IAAIC,OAAQhF,GAC9B2E,MAAKC,IACJjB,EAAaiB,EAAI5E,KAAKA,KAAKA,KAAK,IAEjC6E,OAAMC,IACLnB,EAAa,GAAG,GAChB,EAGZqB,EAAQ,GACR,CAAC1B,EAAaF,EAAKgB,OAGnB1G,EAAAA,EAAAA,MAACuH,EAAAA,EAAS,CAACC,UAAUhC,EAASiC,cAAuB,KAAK1H,SAAA,EACxDC,EAAAA,EAAAA,MAACP,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQE,eAAgB,gBAAiBC,WAAY,SAAU4H,GAAI,GAAI3H,SAAA,EACzFP,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CAACO,QAAQ,KAAIX,SAAC,6BACzBP,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CACFC,GAAI,CACFC,QAAS,OACTE,eAAgB,WAChB8H,GAAI,EACJhD,OAAQ,YACRiD,YAAa,UACbC,aAAc,EACd3H,EAAG,IACHH,UAEFP,EAAAA,EAAAA,KAACsI,EAAAA,EAAU,CAAClH,MAAOgF,EAAa/E,SApGd8F,IACxBd,EAAec,EAAK,UAuGlBnH,EAAAA,EAAAA,KAACuI,EAAU,CAACvK,YApGSoD,IACvBmF,EAAUnF,EAAM,EAmG4BnD,cAAe+E,EAAQ9E,WAAY2H,KAE7E7F,EAAAA,EAAAA,KAACwI,EAAAA,EAAa,CACZrG,UAAU,QACVL,MAAM,UACNZ,QAAQ,YACRa,QAlGW+E,UACfH,GAAe,GACf,MAAMI,EAAWT,IAAMF,GAAaY,OAAO,aACrClE,EAAO,CACXmE,OAAQf,EAAKgB,IACbC,KAAMJ,EACNjE,KAAME,GAEJF,EAAKA,MAA6B,IAArBA,EAAKA,KAAKhC,aAInBsG,EAAAA,GAAMC,KAAKC,EAAAA,GAAUC,QAAQkB,OAAQ3F,GAClC2E,MAAKC,IACJ/D,QAAQC,IAAI8D,EAAI5E,MAChB6D,GAAe,EAAM,IAEtBgB,OAAMC,IACLjB,GAAe,GACfhD,QAAQC,IAAIgE,EAAI,KAV1BjE,QAAQC,IAAI,kBACZ+C,GAAe,GAWjB,EA8EI+B,QAAShC,EACTxG,GAAM,CAACa,GAAG,EAAGC,GAAG,GAChBoB,WAAWpC,EAAAA,EAAAA,KAAC2I,EAAAA,EAAe,IAAIpI,SAChC,YAIDP,EAAAA,EAAAA,KAAC4I,EAAAA,EAAO,CAAC1I,GAAI,CAAE2I,YAAa,SAAU7H,GAAG,MAEzChB,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CAACO,QAAQ,KAAKhB,GAAI,CAACc,GAAG,GAAGT,SAAC,+BACrCP,EAAAA,EAAAA,KAACuI,EAAU,CAACvK,YAjHYoD,IAC1BqF,EAAarF,EAAM,EAgH4BnD,cAAeuI,EAAWtI,WAAY4H,KACnF9F,EAAAA,EAAAA,KAACwI,EAAAA,EAAa,CACZrG,UAAU,QACVL,MAAM,UACNZ,QAAQ,YACRa,QA1Fc+E,UAClBD,GAAa,GACb,MAAM/D,EAAO,CACXmE,OAAQf,EAAKgB,IACbpE,KAAM0D,GAEJ1D,EAAKA,MAA6B,IAArBA,EAAKA,KAAKhC,aAInBsG,EAAAA,GAAMC,KAAKC,EAAAA,GAAUO,IAAIY,OAAQ3F,GAC9B2E,MAAKC,IACJ/D,QAAQC,IAAI8D,EAAI5E,MAChB+D,GAAa,EAAM,IAEpBc,OAAMC,IACLf,GAAa,GACblD,QAAQC,IAAIgE,EAAI,KAV1BjE,QAAQC,IAAI,kBACZiD,GAAa,GAWf,EAwEI6B,QAAS9B,EACT1G,GAAM,CAACa,GAAG,EAAGC,GAAG,GAChBoB,WAAWpC,EAAAA,EAAAA,KAAC2I,EAAAA,EAAe,IAAIpI,SAChC,iBAKP,CC/Je,SAASuI,IACtB,OACEtI,EAAAA,EAAAA,MAAAuI,EAAAA,SAAA,CAAAxI,SAAA,EACEP,EAAAA,EAAAA,KAACgJ,EAAAA,GAAM,CAAAzI,UACLP,EAAAA,EAAAA,KAAA,SAAAO,SAAO,gCAGTP,EAAAA,EAAAA,KAAC+F,EAAY,MAGnB,C","sources":["sections/revenue/uploadFile.js","sections/revenue/view.js","pages/dashboard/uploadResult.js"],"sourcesContent":["import * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n  TextField,\r\n  TablePagination,\r\n  TableSortLabel,\r\n  InputAdornment,\r\n  IconButton,\r\n} from '@mui/material';\r\n\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport { styled } from '@mui/material/styles';\r\nimport FileUploadIcon from '@mui/icons-material/FileUpload';\r\n\r\nconst VisuallyHiddenInput = styled('input')({\r\n  clip: 'rect(0 0 0 0)',\r\n  clipPath: 'inset(50%)',\r\n  height: 1,\r\n  overflow: 'hidden',\r\n  position: 'absolute',\r\n  bottom: 0,\r\n  left: 0,\r\n  whiteSpace: 'nowrap',\r\n  width: 1,\r\n});\r\n\r\nfunction UploadFile ({onSetResult, currentResult, titleArray}) {\r\n  const [tableData, setTableData] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [tempQuery, setTempQuery] = useState('');\r\n  const [orderBy, setOrderBy] = useState('');\r\n  const [orderDirection, setOrderDirection] = useState('asc');\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  \r\n  \r\n\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        const data = new Uint8Array(e.target.result);\r\n        const workbook = XLSX.read(data, { type: 'array' });\r\n\r\n        // Assuming the first sheet is what we want\r\n        const sheetName = workbook.SheetNames[0];\r\n        const worksheet = workbook.Sheets[sheetName];\r\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\r\n\r\n        if (jsonData.length > 0) {\r\n          const rows = jsonData.slice(1);\r\n          onSetResult(rows);\r\n          setTableData(rows);\r\n          console.log(rows)\r\n        }\r\n      };\r\n      reader.readAsArrayBuffer(file);\r\n    }\r\n  }\r\n\r\n  const handleSearchChange = (event) => {\r\n    setTempQuery(event.target.value);\r\n  };\r\n\r\n  const handleRequestSort = (column) => {\r\n    const isAsc = orderBy === column && orderDirection === 'asc';\r\n    setOrderDirection(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(column);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const sortedData = [...tableData].sort((a, b) => {\r\n    if (!orderBy) return 0;\r\n    const columnIndex = titleArray.indexOf(orderBy);\r\n    if (a[columnIndex] < b[columnIndex]) {\r\n      return orderDirection === 'asc' ? -1 : 1;\r\n    }\r\n    if (a[columnIndex] > b[columnIndex]) {\r\n      return orderDirection === 'asc' ? 1 : -1;\r\n    }\r\n    return 0;\r\n  });\r\n\r\n  const handleSearch = () => {\r\n    setSearchQuery(tempQuery);\r\n  }\r\n  const filteredData = sortedData.filter((row) => row[0]?.toString().includes(searchQuery));\r\n  \r\n\r\n  const paginatedData = filteredData.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n\r\n  useEffect(() => {\r\n    setTableData(currentResult)\r\n  },[currentResult])\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        position: 'relative',\r\n        width: '100%',\r\n        justifyContent: 'top',\r\n        alignItems: 'center',\r\n      }}\r\n    >\r\n      <Card sx={{ \r\n        width: '100%', \r\n        p: 2,\r\n      }}>\r\n        <Typography sx={{ fontWeight: '500', fontSize: '18px' }}>\r\n          {titleArray.length === 3 ? \"Chart of Account\" : \"Monthly Result\"} Table\r\n        </Typography>\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n            mt: 2,\r\n            mb: 2\r\n          }}\r\n        >\r\n          <TextField\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            value={tempQuery}\r\n            onChange={handleSearchChange}\r\n            placeholder=\"Search by AccountID\"\r\n            InputProps={{\r\n              endAdornment: (\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton\r\n                    edge=\"end\"\r\n                    color=\"primary\"\r\n                    onClick={handleSearch} // Replace with your search logic\r\n                  >\r\n                    <SearchIcon />\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n            sx={{ width: '40%' }}\r\n          />\r\n          <Button\r\n            component=\"label\"\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            startIcon={<FileUploadIcon />}\r\n          >\r\n            Upload files\r\n            <VisuallyHiddenInput\r\n              type=\"file\"\r\n              accept=\".xlsx\"\r\n              onChange={(event) => handleFileUpload(event)}\r\n              multiple={false}\r\n            />\r\n          </Button>\r\n        </Box>\r\n\r\n        <TableContainer>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                {titleArray.map((title, index) => (\r\n                  <TableCell key={index} style={{ textAlign: 'center' }}>\r\n                    <TableSortLabel\r\n                      active={orderBy === title}\r\n                      direction={orderBy === title ? orderDirection : 'asc'}\r\n                      onClick={() => handleRequestSort(title)}\r\n                    >\r\n                      {title}\r\n                    </TableSortLabel>\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {paginatedData.map((row, rowIndex) => (\r\n                <TableRow key={rowIndex}>\r\n                  {row.map((cell, cellIndex) => (\r\n                    <TableCell\r\n                      key={cellIndex}\r\n                      style={{\r\n                        border: 'none',\r\n                        padding: '8px',\r\n                        textAlign: 'center',\r\n                      }}\r\n                    >\r\n                      {cell}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={filteredData.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Card>\r\n    </Box>\r\n  );\r\n}\r\n\r\nUploadFile.propTypes = {\r\n  currentResult: PropTypes.array,\r\n  titleArray: PropTypes.array,\r\n  onSetResult: PropTypes.func,\r\n};\r\n\r\nexport default UploadFile;\r\n","import { useEffect, useState } from 'react';\r\n// components\r\nimport { Box, Container, Divider, Typography} from '@mui/material';\r\nimport {LoadingButton} from '@mui/lab';\r\n// eslint-disable-next-line import/no-extraneous-dependencies\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\n// eslint-disable-next-line import/no-extraneous-dependencies\r\nimport dayjs from 'dayjs';\r\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\r\nimport axios, { endpoints } from 'src/utils/axios';\r\nimport { useSettingsContext } from 'src/components/settings';\r\nimport { useAuthContext } from 'src/auth/hooks';\r\nimport UploadFile from './uploadFile';\r\nimport './style.css';\r\n// ----------------------------------------------------------------------\r\nconst monthTitle = [\r\n  \"AccountID\", \"Revenue/Expense Description\", \"Amount($)\", \"Revenue/Expense ID\"\r\n]\r\nconst COATitle = [\r\n  \"AccountID\", \"Description\", \"Roll UP\"\r\n]\r\nexport default function UploadResult() {\r\n  const settings = useSettingsContext();\r\n  const {user} = useAuthContext();\r\n  const [currentDate, setCurrentDate] = useState(dayjs());\r\n  const [result, setResult] = useState([]);\r\n  const [COAResult, setCOAResult] = useState([]);\r\n  const [uploadState, setUploadState] = useState(false);\r\n  const [uploadCOA, setUploadCOA] = useState(false);\r\n\r\n  const handleDateChange = (date) => {\r\n    setCurrentDate(date);\r\n  };\r\n\r\n  const handleSetResult = (value) => {\r\n    setResult(value)\r\n  }\r\n\r\n  const handleSetCOAResult = (value) => {\r\n    setCOAResult(value)\r\n  }\r\n\r\n  const onSubmit = async () => {\r\n    setUploadState(true)\r\n    const saveDate = dayjs(currentDate).format('MMMM YYYY');\r\n    const data = {\r\n      userId: user._id,\r\n      date: saveDate,\r\n      data: result\r\n    }\r\n    if(!data.data || data.data.length === 0) {\r\n      console.log(\"data required!\")\r\n      setUploadState(false)\r\n    } else {\r\n      await axios.post(endpoints.revenue.create, data)\r\n              .then(res => {\r\n                console.log(res.data)\r\n                setUploadState(false)\r\n              })\r\n              .catch(err => {\r\n                setUploadState(false)\r\n                console.log(err)\r\n              })\r\n    }\r\n  }\r\n\r\n  const onCOASubmit = async () => {\r\n    setUploadCOA(true)\r\n    const data = {\r\n      userId: user._id,\r\n      data: COAResult\r\n    }\r\n    if(!data.data || data.data.length === 0) {\r\n      console.log(\"data required!\")\r\n      setUploadCOA(false)\r\n    } else {\r\n      await axios.post(endpoints.coa.create, data)\r\n              .then(res => {\r\n                console.log(res.data)\r\n                setUploadCOA(false)\r\n              })\r\n              .catch(err => {\r\n                setUploadCOA(false)\r\n                console.log(err)\r\n              })\r\n    }\r\n  }\r\n\r\n  useEffect(()=>{\r\n    const getRevenue = async () => {\r\n      const saveDate = dayjs(currentDate).format('MMMM YYYY');\r\n      const data = {userId: user._id, date: saveDate}\r\n      await axios.post(endpoints.revenue.getRevenue, data)\r\n              .then(res => {\r\n                setResult(res.data.data.data);\r\n              })\r\n              .catch(err => {\r\n                setResult([])\r\n              })\r\n    }\r\n\r\n    const getCOA = async () => {\r\n      const data = {userId: user._id}\r\n      await axios.post(endpoints.coa.getCOA, data)\r\n              .then(res => {\r\n                setCOAResult(res.data.data.data);\r\n              })\r\n              .catch(err => {\r\n                setCOAResult([])\r\n              })\r\n    }\r\n    getRevenue()\r\n    getCOA()\r\n  },[currentDate, user._id])\r\n  \r\n  return (\r\n    <Container maxWidth={settings.themeStretch ? false : 'xl'}>\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', pb: 2 }}>\r\n        <Typography variant=\"h4\"> Upload Monthly Result </Typography>\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            justifyContent: 'flex-end',\r\n            mr: 4,\r\n            border: '2px solid',\r\n            borderColor: '#007867',\r\n            borderRadius: 1,\r\n            p: 0.2,\r\n          }}\r\n        >\r\n          <DatePicker value={currentDate} onChange={handleDateChange}/>\r\n        </Box>\r\n      </Box>\r\n\r\n      <UploadFile onSetResult={handleSetResult} currentResult={result} titleArray={monthTitle}/>\r\n\r\n      <LoadingButton\r\n        component=\"label\"\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n        onClick={onSubmit}\r\n        loading={uploadState}\r\n        sx = {{mt:2, mb:2}}\r\n        startIcon={<CloudUploadIcon />}\r\n      >\r\n        Submit\r\n      </LoadingButton>\r\n\r\n      <Divider sx={{ borderStyle: 'dashed', mb:2 }} />\r\n\r\n      <Typography variant=\"h4\" sx={{mb:2}}> Upload Chart of Account </Typography>\r\n      <UploadFile onSetResult={handleSetCOAResult} currentResult={COAResult} titleArray={COATitle}/>\r\n      <LoadingButton\r\n        component=\"label\"\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n        onClick={onCOASubmit}\r\n        loading={uploadCOA}\r\n        sx = {{mt:2, mb:2}}\r\n        startIcon={<CloudUploadIcon />}\r\n      >\r\n        Submit COA\r\n      </LoadingButton>\r\n    </Container>\r\n  );\r\n}\r\n","import { Helmet } from 'react-helmet-async';\r\nimport UploadResult from 'src/sections/revenue/view';\r\n// sections\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function Page() {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Dashboard: UploadResult</title>\r\n      </Helmet>\r\n\r\n      <UploadResult />\r\n    </>\r\n  );\r\n}\r\n"],"names":["VisuallyHiddenInput","styled","clip","clipPath","height","overflow","position","bottom","left","whiteSpace","width","_ref","onSetResult","currentResult","titleArray","tableData","setTableData","useState","searchQuery","setSearchQuery","tempQuery","setTempQuery","orderBy","setOrderBy","orderDirection","setOrderDirection","page","setPage","rowsPerPage","setRowsPerPage","filteredData","sort","a","b","columnIndex","indexOf","filter","row","_row$","toString","includes","paginatedData","slice","useEffect","_jsx","Box","sx","display","flexDirection","justifyContent","alignItems","children","_jsxs","Card","p","Typography","fontWeight","fontSize","length","mt","mb","TextField","variant","size","value","onChange","event","target","placeholder","InputProps","endAdornment","InputAdornment","IconButton","edge","color","onClick","handleSearch","SearchIcon","Button","component","startIcon","FileUploadIcon","type","accept","file","files","reader","FileReader","onload","e","data","Uint8Array","result","workbook","XLSX","sheetName","SheetNames","worksheet","Sheets","jsonData","sheet_to_json","header","rows","console","log","readAsArrayBuffer","handleFileUpload","multiple","TableContainer","Table","TableHead","TableRow","map","title","index","TableCell","style","textAlign","TableSortLabel","active","direction","handleRequestSort","column","TableBody","rowIndex","cell","cellIndex","border","padding","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","monthTitle","COATitle","UploadResult","settings","useSettingsContext","user","useAuthContext","currentDate","setCurrentDate","dayjs","setResult","COAResult","setCOAResult","uploadState","setUploadState","uploadCOA","setUploadCOA","async","saveDate","format","userId","_id","date","axios","post","endpoints","revenue","getRevenue","then","res","catch","err","coa","getCOA","Container","maxWidth","themeStretch","pb","mr","borderColor","borderRadius","DatePicker","UploadFile","LoadingButton","create","loading","CloudUploadIcon","Divider","borderStyle","Page","_Fragment","Helmet"],"sourceRoot":""}