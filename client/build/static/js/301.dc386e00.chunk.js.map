{"version":3,"file":"static/js/301.dc386e00.chunk.js","mappings":"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","sources":["api/submission.js","sections/forecast/RevenueDetailTable.js","sections/forecast/view.js","pages/dashboard/dataForecast.js"],"sourcesContent":["import axios, { endpoints } from 'src/utils/axios';\r\n\r\nexport const CreateRevenueExpenseApi = async (data) => {\r\n  try {\r\n    const response = await axios.post(endpoints.submission.create, data);\r\n    console.log('Response:', response);\r\n    return response.data.data;\r\n  } catch (error) {\r\n    console.error('Error creating submission:', error);\r\n    throw error;\r\n  }\r\n};\r\nexport const updateForecast = async (forecastData) => {\r\n  try {\r\n    const response = await axios.put(endpoints.submission.update, forecastData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error updating forecast:', error);\r\n    throw error;\r\n  }\r\n};\r\nexport const GetSubmissionByDate = async (selectedDate) => {\r\n  try {\r\n    const response = await axios.get(endpoints.submission.getSubmissionByDate, {\r\n      params: {\r\n        selectedDate,\r\n      },\r\n    });\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\r\n      'Error fetching submission:',\r\n      error.response ? error.response.data : error.message\r\n    );\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const GetSubmissionOfCurrentMonth = async () => {\r\n  try {\r\n    const response = await axios.get(endpoints.submission.getSubmissionByCurrentDate, {});\r\n\r\n    console.log('Submission retrieved successfully:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\r\n      'Error fetching submission:',\r\n      error.response ? error.response.data : error.message\r\n    );\r\n    throw error;\r\n  }\r\n};\r\nexport const GetSubmissionDifference = async (selectedDate) => {\r\n  try {\r\n    const response = await axios.get(endpoints.submission.submissionDifference, {\r\n      params: {\r\n        selectedDate,\r\n      },\r\n    });\r\n\r\n    console.log('Submission retrieved successfully:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\r\n      'Error fetching submission:',\r\n      error.response ? error.response.data : error.message\r\n    );\r\n    throw error;\r\n  }\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CircularProgress,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TextField,\r\n  Typography,\r\n} from '@mui/material';\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router';\r\nimport { updateForecast } from 'src/api/submission';\r\nimport { paths } from 'src/routes/paths';\r\n\r\nconst RevenueDetailTable = ({ data, selectedDate }) => {\r\n  const navigate = useNavigate();\r\n\r\n  const formattedDate = new Date(selectedDate).toISOString().split('T')[0];\r\n\r\n  const [revenueForecasts, setRevenueForecasts] = useState(\r\n    data?.revenue?.map(() => ({ value: '' })) || []\r\n  );\r\n  const [expenseForecasts, setExpenseForecasts] = useState(\r\n    data?.expense?.map(() => ({ value: '' })) || []\r\n  );\r\n  const [salaryForecast, setSalaryForecast] = useState(0);\r\n  const [rentForecast, setRentForecast] = useState(0);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleRevenueChange = (index, value) => {\r\n    // Ensure the array length matches the data length\r\n    setRevenueForecasts((prev) => {\r\n      const updated = [...prev];\r\n      while (updated.length <= index) {\r\n        updated.push({ value: '' }); // Fill missing entries\r\n      }\r\n      updated[index].value = value;\r\n      return updated;\r\n    });\r\n  };\r\n\r\n  const handleExpenseChange = (index, value) => {\r\n    setExpenseForecasts((prev) => {\r\n      const updated = [...prev];\r\n      while (updated.length <= index) {\r\n        updated.push({ value: '' });\r\n      }\r\n      updated[index].value = value;\r\n      return updated;\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n\r\n    const forecastData = {\r\n      revenueForecasts: revenueForecasts.map((forecast) => forecast.value),\r\n      expenseForecasts: expenseForecasts.map((forecast) => forecast.value),\r\n      salaryForecast,\r\n      rentForecast,\r\n      selectedDate: formattedDate,\r\n    };\r\n\r\n    try {\r\n      const response = await updateForecast(forecastData);\r\n      console.log('Forecast updated successfully:', response);\r\n      navigate(paths.dashboard.root);\r\n    } catch (errorr) {\r\n      console.error('Failed to update forecast:', errorr);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Card>\r\n        <Typography sx={{ p: 2, fontWeight: '500', fontSize: '18px' }}>Revenue</Typography>\r\n        <TableContainer>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Revenue</TableCell>\r\n\r\n                <TableCell>Difference From Prior Period</TableCell>\r\n                <TableCell>Difference from Forecast</TableCell>\r\n                <TableCell>Forecast Next Reporting Period</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {data?.revenue?.map((i, index) => (\r\n                <TableRow key={`revenue-${index}`}>\r\n                  <TableCell>{i?.name || ''}</TableCell>\r\n                  <TableCell>{i?.value || '0'}</TableCell>\r\n                  <TableCell>{i?.forecast || 0}</TableCell>\r\n                  <TableCell>\r\n                    <TextField\r\n                      value={revenueForecasts[index]?.value || ''}\r\n                      onChange={(e) => handleRevenueChange(index, e.target.value)}\r\n                      label=\"Forecast\"\r\n                    />\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Card>\r\n      <Card sx={{ mt: 4 }}>\r\n        <Typography sx={{ p: 2, fontWeight: '500', fontSize: '18px' }}>Expense</Typography>\r\n        <TableContainer>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Expense</TableCell>\r\n\r\n                <TableCell>Difference From Prior Period</TableCell>\r\n                <TableCell>Difference from Forecast</TableCell>\r\n                <TableCell>Forecast Next Reporting Period</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {data?.expense?.map((i, index) => (\r\n                <TableRow key={`expense-${index}`}>\r\n                  <TableCell>{i?.name}</TableCell>\r\n                  <TableCell>{i?.value}</TableCell>\r\n                  <TableCell>{i?.forecast || '0'}</TableCell>\r\n                  <TableCell>\r\n                    <TextField\r\n                      label=\"Forecast\"\r\n                      value={expenseForecasts[index]?.value || ''}\r\n                      onChange={(e) => handleExpenseChange(index, e.target.value)}\r\n                    />\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Card>\r\n      <Card sx={{ mt: 4 }}>\r\n        <Typography sx={{ p: 2, fontWeight: '500', fontSize: '18px' }}>Salary and Rent</Typography>\r\n        <TableContainer>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Expense</TableCell>\r\n\r\n                <TableCell>Difference From Prior Period</TableCell>\r\n                <TableCell>Difference from Forecast</TableCell>\r\n                <TableCell>Forecast Next Reporting Period</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              <TableRow>\r\n                <TableCell>Salary</TableCell>\r\n                <TableCell>{data?.salary}</TableCell>\r\n                <TableCell>0</TableCell>\r\n                <TableCell>\r\n                  <TextField\r\n                    label=\"Forecast\"\r\n                    value={salaryForecast}\r\n                    onChange={(e) => setSalaryForecast(e.target.value)}\r\n                  />\r\n                </TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell>Rent</TableCell>\r\n                <TableCell>{data?.rent}</TableCell>\r\n                <TableCell>0</TableCell>\r\n                <TableCell>\r\n                  <TextField\r\n                    label=\"Forecast\"\r\n                    value={rentForecast}\r\n                    onChange={(e) => setRentForecast(e.target.value)}\r\n                  />\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Card>\r\n      <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 4 }}>\r\n        <Button\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          color=\"success\"\r\n          disabled={loading}\r\n          onClick={handleSubmit}\r\n        >\r\n          {loading ? <CircularProgress size={24} /> : 'Submit'}\r\n        </Button>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\nRevenueDetailTable.propTypes = {\r\n  data: PropTypes.object,\r\n  selectedDate: PropTypes.object,\r\n};\r\nexport default RevenueDetailTable;\r\n","// @mui\r\nimport Box from '@mui/material/Box';\r\nimport Container from '@mui/material/Container';\r\nimport Typography from '@mui/material/Typography';\r\n// eslint-disable-next-line import/no-extraneous-dependencies\r\nimport DatePicker from 'react-datepicker';\r\n// eslint-disable-next-line import/no-extraneous-dependencies\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n// components\r\nimport { useEffect, useState } from 'react';\r\nimport { useSettingsContext } from 'src/components/settings';\r\nimport Iconify from 'src/components/iconify';\r\nimport RevenueDetailTable from './RevenueDetailTable';\r\n\r\nimport '../revenue/style.css';\r\n// eslint-disable-next-line import/order\r\nimport { GetSubmissionDifference } from 'src/api/submission';\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function DataForecast() {\r\n  const settings = useSettingsContext();\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n\r\n  const [submission, setSubmission] = useState(null);\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n  useEffect(() => {\r\n    const fetchSubmission = async () => {\r\n      try {\r\n        if (selectedDate) {\r\n          const adjustedDate = new Date(selectedDate);\r\n          adjustedDate.setDate(1); // Ensure it's the first day of the selected month\r\n\r\n          const formattedDate = adjustedDate.toISOString().split('T')[0];\r\n          const data = await GetSubmissionDifference(formattedDate);\r\n          setSubmission(data);\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to fetch submission:', error);\r\n      }\r\n    };\r\n\r\n    fetchSubmission();\r\n  }, [selectedDate]);\r\n  return (\r\n    <Container maxWidth={settings.themeStretch ? false : 'xl'}>\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', pb: 2 }}>\r\n        <Typography variant=\"h4\"> Revenue Details</Typography>\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            justifyContent: 'flex-end',\r\n            mr: 4,\r\n            border: '2px solid',\r\n            borderColor: '#007867',\r\n            borderRadius: 1,\r\n            p: 0.2,\r\n          }}\r\n        >\r\n          <Iconify icon=\"lsicon:calendar-outline\" width={34} sx={{ pt: 0.5, color: 'red' }} />\r\n          <DatePicker\r\n            selected={selectedDate}\r\n            onChange={handleDateChange}\r\n            dateFormat=\"MMMM, yyyy\"\r\n            showMonthYearPicker\r\n            showFullMonthYearPicker\r\n            isClearable\r\n            placeholderText=\"Select a month/year\"\r\n            className=\"custom-datepicker\"\r\n          />\r\n        </Box>\r\n      </Box>\r\n\r\n      <RevenueDetailTable data={submission?.data} selectedDate={selectedDate} />\r\n    </Container>\r\n  );\r\n}\r\n","import { Helmet } from 'react-helmet-async';\r\nimport DataForecast from 'src/sections/forecast/view';\r\n// sections\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function Page() {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Dashboard: Details</title>\r\n      </Helmet>\r\n\r\n      <DataForecast />\r\n    </>\r\n  );\r\n}\r\n"],"names":["updateForecast","async","axios","put","endpoints","submission","update","forecastData","data","error","console","GetSubmissionByDate","get","getSubmissionByDate","params","selectedDate","response","message","GetSubmissionDifference","submissionDifference","log","_ref","_data$revenue","_data$expense","_data$revenue2","_data$expense2","navigate","useNavigate","formattedDate","Date","toISOString","split","revenueForecasts","setRevenueForecasts","useState","revenue","map","value","expenseForecasts","setExpenseForecasts","expense","salaryForecast","setSalaryForecast","rentForecast","setRentForecast","loading","setLoading","_jsxs","_Fragment","children","Card","_jsx","Typography","sx","p","fontWeight","fontSize","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","i","index","_revenueForecasts$ind","name","forecast","TextField","onChange","e","handleRevenueChange","prev","updated","length","push","target","label","concat","mt","_expenseForecasts$ind","handleExpenseChange","salary","rent","Box","display","justifyContent","Button","type","variant","color","disabled","onClick","preventDefault","paths","dashboard","root","errorr","CircularProgress","size","DataForecast","settings","useSettingsContext","setSelectedDate","setSubmission","useEffect","adjustedDate","setDate","fetchSubmission","Container","maxWidth","themeStretch","alignItems","pb","mr","border","borderColor","borderRadius","Iconify","icon","width","pt","DatePicker","selected","date","dateFormat","showMonthYearPicker","showFullMonthYearPicker","isClearable","placeholderText","className","RevenueDetailTable","Page","Helmet"],"sourceRoot":""}